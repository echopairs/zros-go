// Code generated by protoc-gen-go. DO NOT EDIT.
// source: zros.proto

package zros_rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Status_Code int32

const (
	Status_OK                  Status_Code = 0
	Status_UNKNOWN             Status_Code = 1
	Status_INVALID_ARGUMENT    Status_Code = 2
	Status_NOT_FOUND           Status_Code = 3
	Status_FAILED_PRECONDITION Status_Code = 4
	Status_ALREADY_EXISTS      Status_Code = 5
)

var Status_Code_name = map[int32]string{
	0: "OK",
	1: "UNKNOWN",
	2: "INVALID_ARGUMENT",
	3: "NOT_FOUND",
	4: "FAILED_PRECONDITION",
	5: "ALREADY_EXISTS",
}
var Status_Code_value = map[string]int32{
	"OK":                  0,
	"UNKNOWN":             1,
	"INVALID_ARGUMENT":    2,
	"NOT_FOUND":           3,
	"FAILED_PRECONDITION": 4,
	"ALREADY_EXISTS":      5,
}

func (x Status_Code) String() string {
	return proto.EnumName(Status_Code_name, int32(x))
}
func (Status_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_zros_c7b669e725165f11, []int{8, 0}
}

type PingRequest struct {
	Origin               string   `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingRequest) Reset()         { *m = PingRequest{} }
func (m *PingRequest) String() string { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()    {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_zros_c7b669e725165f11, []int{0}
}
func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingRequest.Unmarshal(m, b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
}
func (dst *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(dst, src)
}
func (m *PingRequest) XXX_Size() int {
	return xxx_messageInfo_PingRequest.Size(m)
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

func (m *PingRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

type PhysicalNodeInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AgentAddress         string   `protobuf:"bytes,2,opt,name=agent_address,json=agentAddress,proto3" json:"agent_address,omitempty"`
	RealAddress          string   `protobuf:"bytes,3,opt,name=real_address,json=realAddress,proto3" json:"real_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PhysicalNodeInfo) Reset()         { *m = PhysicalNodeInfo{} }
func (m *PhysicalNodeInfo) String() string { return proto.CompactTextString(m) }
func (*PhysicalNodeInfo) ProtoMessage()    {}
func (*PhysicalNodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_zros_c7b669e725165f11, []int{1}
}
func (m *PhysicalNodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhysicalNodeInfo.Unmarshal(m, b)
}
func (m *PhysicalNodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhysicalNodeInfo.Marshal(b, m, deterministic)
}
func (dst *PhysicalNodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalNodeInfo.Merge(dst, src)
}
func (m *PhysicalNodeInfo) XXX_Size() int {
	return xxx_messageInfo_PhysicalNodeInfo.Size(m)
}
func (m *PhysicalNodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalNodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalNodeInfo proto.InternalMessageInfo

func (m *PhysicalNodeInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PhysicalNodeInfo) GetAgentAddress() string {
	if m != nil {
		return m.AgentAddress
	}
	return ""
}

func (m *PhysicalNodeInfo) GetRealAddress() string {
	if m != nil {
		return m.RealAddress
	}
	return ""
}

type SubscriberInfo struct {
	PhysicalNodeInfo     *PhysicalNodeInfo `protobuf:"bytes,1,opt,name=physical_node_info,json=physicalNodeInfo,proto3" json:"physical_node_info,omitempty"`
	Topic                string            `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SubscriberInfo) Reset()         { *m = SubscriberInfo{} }
func (m *SubscriberInfo) String() string { return proto.CompactTextString(m) }
func (*SubscriberInfo) ProtoMessage()    {}
func (*SubscriberInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_zros_c7b669e725165f11, []int{2}
}
func (m *SubscriberInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriberInfo.Unmarshal(m, b)
}
func (m *SubscriberInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriberInfo.Marshal(b, m, deterministic)
}
func (dst *SubscriberInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriberInfo.Merge(dst, src)
}
func (m *SubscriberInfo) XXX_Size() int {
	return xxx_messageInfo_SubscriberInfo.Size(m)
}
func (m *SubscriberInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriberInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriberInfo proto.InternalMessageInfo

func (m *SubscriberInfo) GetPhysicalNodeInfo() *PhysicalNodeInfo {
	if m != nil {
		return m.PhysicalNodeInfo
	}
	return nil
}

func (m *SubscriberInfo) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type PublisherInfo struct {
	PhysicalNodeInfo     *PhysicalNodeInfo `protobuf:"bytes,1,opt,name=physical_node_info,json=physicalNodeInfo,proto3" json:"physical_node_info,omitempty"`
	Topic                string            `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PublisherInfo) Reset()         { *m = PublisherInfo{} }
func (m *PublisherInfo) String() string { return proto.CompactTextString(m) }
func (*PublisherInfo) ProtoMessage()    {}
func (*PublisherInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_zros_c7b669e725165f11, []int{3}
}
func (m *PublisherInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublisherInfo.Unmarshal(m, b)
}
func (m *PublisherInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublisherInfo.Marshal(b, m, deterministic)
}
func (dst *PublisherInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublisherInfo.Merge(dst, src)
}
func (m *PublisherInfo) XXX_Size() int {
	return xxx_messageInfo_PublisherInfo.Size(m)
}
func (m *PublisherInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PublisherInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PublisherInfo proto.InternalMessageInfo

func (m *PublisherInfo) GetPhysicalNodeInfo() *PhysicalNodeInfo {
	if m != nil {
		return m.PhysicalNodeInfo
	}
	return nil
}

func (m *PublisherInfo) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type ServiceServerInfo struct {
	PhysicalNodeInfo     *PhysicalNodeInfo `protobuf:"bytes,1,opt,name=physical_node_info,json=physicalNodeInfo,proto3" json:"physical_node_info,omitempty"`
	ServiceName          string            `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ServiceServerInfo) Reset()         { *m = ServiceServerInfo{} }
func (m *ServiceServerInfo) String() string { return proto.CompactTextString(m) }
func (*ServiceServerInfo) ProtoMessage()    {}
func (*ServiceServerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_zros_c7b669e725165f11, []int{4}
}
func (m *ServiceServerInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceServerInfo.Unmarshal(m, b)
}
func (m *ServiceServerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceServerInfo.Marshal(b, m, deterministic)
}
func (dst *ServiceServerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceServerInfo.Merge(dst, src)
}
func (m *ServiceServerInfo) XXX_Size() int {
	return xxx_messageInfo_ServiceServerInfo.Size(m)
}
func (m *ServiceServerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceServerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceServerInfo proto.InternalMessageInfo

func (m *ServiceServerInfo) GetPhysicalNodeInfo() *PhysicalNodeInfo {
	if m != nil {
		return m.PhysicalNodeInfo
	}
	return nil
}

func (m *ServiceServerInfo) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

type ServiceClientInfo struct {
	PhysicalNodeInfo     *PhysicalNodeInfo `protobuf:"bytes,1,opt,name=physical_node_info,json=physicalNodeInfo,proto3" json:"physical_node_info,omitempty"`
	ServiceName          string            `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ServiceClientInfo) Reset()         { *m = ServiceClientInfo{} }
func (m *ServiceClientInfo) String() string { return proto.CompactTextString(m) }
func (*ServiceClientInfo) ProtoMessage()    {}
func (*ServiceClientInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_zros_c7b669e725165f11, []int{5}
}
func (m *ServiceClientInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceClientInfo.Unmarshal(m, b)
}
func (m *ServiceClientInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceClientInfo.Marshal(b, m, deterministic)
}
func (dst *ServiceClientInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceClientInfo.Merge(dst, src)
}
func (m *ServiceClientInfo) XXX_Size() int {
	return xxx_messageInfo_ServiceClientInfo.Size(m)
}
func (m *ServiceClientInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceClientInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceClientInfo proto.InternalMessageInfo

func (m *ServiceClientInfo) GetPhysicalNodeInfo() *PhysicalNodeInfo {
	if m != nil {
		return m.PhysicalNodeInfo
	}
	return nil
}

func (m *ServiceClientInfo) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

type PublisherNodeInfo struct {
	PublisherName        string   `protobuf:"bytes,1,opt,name=publisher_name,json=publisherName,proto3" json:"publisher_name,omitempty"`
	LogicalNodeName      string   `protobuf:"bytes,2,opt,name=logical_node_name,json=logicalNodeName,proto3" json:"logical_node_name,omitempty"`
	PhysicalNodeName     string   `protobuf:"bytes,3,opt,name=physical_node_name,json=physicalNodeName,proto3" json:"physical_node_name,omitempty"`
	Address              string   `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublisherNodeInfo) Reset()         { *m = PublisherNodeInfo{} }
func (m *PublisherNodeInfo) String() string { return proto.CompactTextString(m) }
func (*PublisherNodeInfo) ProtoMessage()    {}
func (*PublisherNodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_zros_c7b669e725165f11, []int{6}
}
func (m *PublisherNodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublisherNodeInfo.Unmarshal(m, b)
}
func (m *PublisherNodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublisherNodeInfo.Marshal(b, m, deterministic)
}
func (dst *PublisherNodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublisherNodeInfo.Merge(dst, src)
}
func (m *PublisherNodeInfo) XXX_Size() int {
	return xxx_messageInfo_PublisherNodeInfo.Size(m)
}
func (m *PublisherNodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PublisherNodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PublisherNodeInfo proto.InternalMessageInfo

func (m *PublisherNodeInfo) GetPublisherName() string {
	if m != nil {
		return m.PublisherName
	}
	return ""
}

func (m *PublisherNodeInfo) GetLogicalNodeName() string {
	if m != nil {
		return m.LogicalNodeName
	}
	return ""
}

func (m *PublisherNodeInfo) GetPhysicalNodeName() string {
	if m != nil {
		return m.PhysicalNodeName
	}
	return ""
}

func (m *PublisherNodeInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type ClientNodeInfo struct {
	ClientName           string   `protobuf:"bytes,1,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	LogicalNodeName      string   `protobuf:"bytes,2,opt,name=logical_node_name,json=logicalNodeName,proto3" json:"logical_node_name,omitempty"`
	PhysicalNodeName     string   `protobuf:"bytes,3,opt,name=physical_node_name,json=physicalNodeName,proto3" json:"physical_node_name,omitempty"`
	Address              string   `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientNodeInfo) Reset()         { *m = ClientNodeInfo{} }
func (m *ClientNodeInfo) String() string { return proto.CompactTextString(m) }
func (*ClientNodeInfo) ProtoMessage()    {}
func (*ClientNodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_zros_c7b669e725165f11, []int{7}
}
func (m *ClientNodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientNodeInfo.Unmarshal(m, b)
}
func (m *ClientNodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientNodeInfo.Marshal(b, m, deterministic)
}
func (dst *ClientNodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientNodeInfo.Merge(dst, src)
}
func (m *ClientNodeInfo) XXX_Size() int {
	return xxx_messageInfo_ClientNodeInfo.Size(m)
}
func (m *ClientNodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientNodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClientNodeInfo proto.InternalMessageInfo

func (m *ClientNodeInfo) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *ClientNodeInfo) GetLogicalNodeName() string {
	if m != nil {
		return m.LogicalNodeName
	}
	return ""
}

func (m *ClientNodeInfo) GetPhysicalNodeName() string {
	if m != nil {
		return m.PhysicalNodeName
	}
	return ""
}

func (m *ClientNodeInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type Status struct {
	Code                 Status_Code `protobuf:"varint,1,opt,name=code,proto3,enum=zros_rpc.Status_Code" json:"code,omitempty"`
	Details              string      `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_zros_c7b669e725165f11, []int{8}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (dst *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(dst, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetCode() Status_Code {
	if m != nil {
		return m.Code
	}
	return Status_OK
}

func (m *Status) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

type Message struct {
	Topic                string             `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Content              []byte             `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	PubNodeInfo          *PublisherNodeInfo `protobuf:"bytes,3,opt,name=pub_node_info,json=pubNodeInfo,proto3" json:"pub_node_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_zros_c7b669e725165f11, []int{9}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Message) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Message) GetPubNodeInfo() *PublisherNodeInfo {
	if m != nil {
		return m.PubNodeInfo
	}
	return nil
}

type ServiceRequest struct {
	ServiceName          string          `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	RequestData          []byte          `protobuf:"bytes,2,opt,name=request_data,json=requestData,proto3" json:"request_data,omitempty"`
	CliNodeInfo          *ClientNodeInfo `protobuf:"bytes,3,opt,name=cli_node_info,json=cliNodeInfo,proto3" json:"cli_node_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ServiceRequest) Reset()         { *m = ServiceRequest{} }
func (m *ServiceRequest) String() string { return proto.CompactTextString(m) }
func (*ServiceRequest) ProtoMessage()    {}
func (*ServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_zros_c7b669e725165f11, []int{10}
}
func (m *ServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceRequest.Unmarshal(m, b)
}
func (m *ServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceRequest.Marshal(b, m, deterministic)
}
func (dst *ServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceRequest.Merge(dst, src)
}
func (m *ServiceRequest) XXX_Size() int {
	return xxx_messageInfo_ServiceRequest.Size(m)
}
func (m *ServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceRequest proto.InternalMessageInfo

func (m *ServiceRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *ServiceRequest) GetRequestData() []byte {
	if m != nil {
		return m.RequestData
	}
	return nil
}

func (m *ServiceRequest) GetCliNodeInfo() *ClientNodeInfo {
	if m != nil {
		return m.CliNodeInfo
	}
	return nil
}

type ServiceResponse struct {
	ServiceName          string   `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	ResponseData         []byte   `protobuf:"bytes,2,opt,name=response_data,json=responseData,proto3" json:"response_data,omitempty"`
	Status               *Status  `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceResponse) Reset()         { *m = ServiceResponse{} }
func (m *ServiceResponse) String() string { return proto.CompactTextString(m) }
func (*ServiceResponse) ProtoMessage()    {}
func (*ServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_zros_c7b669e725165f11, []int{11}
}
func (m *ServiceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceResponse.Unmarshal(m, b)
}
func (m *ServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceResponse.Marshal(b, m, deterministic)
}
func (dst *ServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceResponse.Merge(dst, src)
}
func (m *ServiceResponse) XXX_Size() int {
	return xxx_messageInfo_ServiceResponse.Size(m)
}
func (m *ServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceResponse proto.InternalMessageInfo

func (m *ServiceResponse) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *ServiceResponse) GetResponseData() []byte {
	if m != nil {
		return m.ResponseData
	}
	return nil
}

func (m *ServiceResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*PingRequest)(nil), "zros_rpc.PingRequest")
	proto.RegisterType((*PhysicalNodeInfo)(nil), "zros_rpc.PhysicalNodeInfo")
	proto.RegisterType((*SubscriberInfo)(nil), "zros_rpc.SubscriberInfo")
	proto.RegisterType((*PublisherInfo)(nil), "zros_rpc.PublisherInfo")
	proto.RegisterType((*ServiceServerInfo)(nil), "zros_rpc.ServiceServerInfo")
	proto.RegisterType((*ServiceClientInfo)(nil), "zros_rpc.ServiceClientInfo")
	proto.RegisterType((*PublisherNodeInfo)(nil), "zros_rpc.PublisherNodeInfo")
	proto.RegisterType((*ClientNodeInfo)(nil), "zros_rpc.ClientNodeInfo")
	proto.RegisterType((*Status)(nil), "zros_rpc.Status")
	proto.RegisterType((*Message)(nil), "zros_rpc.Message")
	proto.RegisterType((*ServiceRequest)(nil), "zros_rpc.ServiceRequest")
	proto.RegisterType((*ServiceResponse)(nil), "zros_rpc.ServiceResponse")
	proto.RegisterEnum("zros_rpc.Status_Code", Status_Code_name, Status_Code_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceRPCClient is the client API for ServiceRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceRPCClient interface {
	InvokeService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceResponse, error)
}

type serviceRPCClient struct {
	cc *grpc.ClientConn
}

func NewServiceRPCClient(cc *grpc.ClientConn) ServiceRPCClient {
	return &serviceRPCClient{cc}
}

func (c *serviceRPCClient) InvokeService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/zros_rpc.ServiceRPC/InvokeService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceRPCServer is the server API for ServiceRPC service.
type ServiceRPCServer interface {
	InvokeService(context.Context, *ServiceRequest) (*ServiceResponse, error)
}

func RegisterServiceRPCServer(s *grpc.Server, srv ServiceRPCServer) {
	s.RegisterService(&_ServiceRPC_serviceDesc, srv)
}

func _ServiceRPC_InvokeService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceRPCServer).InvokeService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zros_rpc.ServiceRPC/InvokeService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceRPCServer).InvokeService(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zros_rpc.ServiceRPC",
	HandlerType: (*ServiceRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InvokeService",
			Handler:    _ServiceRPC_InvokeService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zros.proto",
}

// ServiceDiscoveryRPCClient is the client API for ServiceDiscoveryRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceDiscoveryRPCClient interface {
	RegisterPublisher(ctx context.Context, in *PublisherInfo, opts ...grpc.CallOption) (*Status, error)
	UnregisterPublisher(ctx context.Context, in *PublisherInfo, opts ...grpc.CallOption) (*Status, error)
	RegisterServiceServer(ctx context.Context, in *ServiceServerInfo, opts ...grpc.CallOption) (*Status, error)
	UnregisterServiceServer(ctx context.Context, in *ServiceServerInfo, opts ...grpc.CallOption) (*Status, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*Status, error)
}

type serviceDiscoveryRPCClient struct {
	cc *grpc.ClientConn
}

func NewServiceDiscoveryRPCClient(cc *grpc.ClientConn) ServiceDiscoveryRPCClient {
	return &serviceDiscoveryRPCClient{cc}
}

func (c *serviceDiscoveryRPCClient) RegisterPublisher(ctx context.Context, in *PublisherInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/zros_rpc.ServiceDiscoveryRPC/RegisterPublisher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceDiscoveryRPCClient) UnregisterPublisher(ctx context.Context, in *PublisherInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/zros_rpc.ServiceDiscoveryRPC/UnregisterPublisher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceDiscoveryRPCClient) RegisterServiceServer(ctx context.Context, in *ServiceServerInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/zros_rpc.ServiceDiscoveryRPC/RegisterServiceServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceDiscoveryRPCClient) UnregisterServiceServer(ctx context.Context, in *ServiceServerInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/zros_rpc.ServiceDiscoveryRPC/UnregisterServiceServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceDiscoveryRPCClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/zros_rpc.ServiceDiscoveryRPC/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceDiscoveryRPCServer is the server API for ServiceDiscoveryRPC service.
type ServiceDiscoveryRPCServer interface {
	RegisterPublisher(context.Context, *PublisherInfo) (*Status, error)
	UnregisterPublisher(context.Context, *PublisherInfo) (*Status, error)
	RegisterServiceServer(context.Context, *ServiceServerInfo) (*Status, error)
	UnregisterServiceServer(context.Context, *ServiceServerInfo) (*Status, error)
	Ping(context.Context, *PingRequest) (*Status, error)
}

func RegisterServiceDiscoveryRPCServer(s *grpc.Server, srv ServiceDiscoveryRPCServer) {
	s.RegisterService(&_ServiceDiscoveryRPC_serviceDesc, srv)
}

func _ServiceDiscoveryRPC_RegisterPublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublisherInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDiscoveryRPCServer).RegisterPublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zros_rpc.ServiceDiscoveryRPC/RegisterPublisher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDiscoveryRPCServer).RegisterPublisher(ctx, req.(*PublisherInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceDiscoveryRPC_UnregisterPublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublisherInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDiscoveryRPCServer).UnregisterPublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zros_rpc.ServiceDiscoveryRPC/UnregisterPublisher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDiscoveryRPCServer).UnregisterPublisher(ctx, req.(*PublisherInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceDiscoveryRPC_RegisterServiceServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceServerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDiscoveryRPCServer).RegisterServiceServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zros_rpc.ServiceDiscoveryRPC/RegisterServiceServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDiscoveryRPCServer).RegisterServiceServer(ctx, req.(*ServiceServerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceDiscoveryRPC_UnregisterServiceServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceServerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDiscoveryRPCServer).UnregisterServiceServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zros_rpc.ServiceDiscoveryRPC/UnregisterServiceServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDiscoveryRPCServer).UnregisterServiceServer(ctx, req.(*ServiceServerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceDiscoveryRPC_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDiscoveryRPCServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zros_rpc.ServiceDiscoveryRPC/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDiscoveryRPCServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceDiscoveryRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zros_rpc.ServiceDiscoveryRPC",
	HandlerType: (*ServiceDiscoveryRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPublisher",
			Handler:    _ServiceDiscoveryRPC_RegisterPublisher_Handler,
		},
		{
			MethodName: "UnregisterPublisher",
			Handler:    _ServiceDiscoveryRPC_UnregisterPublisher_Handler,
		},
		{
			MethodName: "RegisterServiceServer",
			Handler:    _ServiceDiscoveryRPC_RegisterServiceServer_Handler,
		},
		{
			MethodName: "UnregisterServiceServer",
			Handler:    _ServiceDiscoveryRPC_UnregisterServiceServer_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ServiceDiscoveryRPC_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zros.proto",
}

// MasterRPCClient is the client API for MasterRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MasterRPCClient interface {
	RegisterSubscriber(ctx context.Context, in *SubscriberInfo, opts ...grpc.CallOption) (*Status, error)
	UnregisterSubscriber(ctx context.Context, in *SubscriberInfo, opts ...grpc.CallOption) (*Status, error)
	RegisterPublisher(ctx context.Context, in *PublisherInfo, opts ...grpc.CallOption) (*Status, error)
	UnregisterPublisher(ctx context.Context, in *PublisherInfo, opts ...grpc.CallOption) (*Status, error)
	RegisterServiceServer(ctx context.Context, in *ServiceServerInfo, opts ...grpc.CallOption) (*Status, error)
	UnregisterServiceServer(ctx context.Context, in *ServiceServerInfo, opts ...grpc.CallOption) (*Status, error)
	RegisterServiceClient(ctx context.Context, in *ServiceClientInfo, opts ...grpc.CallOption) (*Status, error)
	UnregisterServiceClient(ctx context.Context, in *ServiceClientInfo, opts ...grpc.CallOption) (*Status, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*Status, error)
}

type masterRPCClient struct {
	cc *grpc.ClientConn
}

func NewMasterRPCClient(cc *grpc.ClientConn) MasterRPCClient {
	return &masterRPCClient{cc}
}

func (c *masterRPCClient) RegisterSubscriber(ctx context.Context, in *SubscriberInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/zros_rpc.MasterRPC/RegisterSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterRPCClient) UnregisterSubscriber(ctx context.Context, in *SubscriberInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/zros_rpc.MasterRPC/UnregisterSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterRPCClient) RegisterPublisher(ctx context.Context, in *PublisherInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/zros_rpc.MasterRPC/RegisterPublisher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterRPCClient) UnregisterPublisher(ctx context.Context, in *PublisherInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/zros_rpc.MasterRPC/UnregisterPublisher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterRPCClient) RegisterServiceServer(ctx context.Context, in *ServiceServerInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/zros_rpc.MasterRPC/RegisterServiceServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterRPCClient) UnregisterServiceServer(ctx context.Context, in *ServiceServerInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/zros_rpc.MasterRPC/UnregisterServiceServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterRPCClient) RegisterServiceClient(ctx context.Context, in *ServiceClientInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/zros_rpc.MasterRPC/RegisterServiceClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterRPCClient) UnregisterServiceClient(ctx context.Context, in *ServiceClientInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/zros_rpc.MasterRPC/UnregisterServiceClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterRPCClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/zros_rpc.MasterRPC/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterRPCServer is the server API for MasterRPC service.
type MasterRPCServer interface {
	RegisterSubscriber(context.Context, *SubscriberInfo) (*Status, error)
	UnregisterSubscriber(context.Context, *SubscriberInfo) (*Status, error)
	RegisterPublisher(context.Context, *PublisherInfo) (*Status, error)
	UnregisterPublisher(context.Context, *PublisherInfo) (*Status, error)
	RegisterServiceServer(context.Context, *ServiceServerInfo) (*Status, error)
	UnregisterServiceServer(context.Context, *ServiceServerInfo) (*Status, error)
	RegisterServiceClient(context.Context, *ServiceClientInfo) (*Status, error)
	UnregisterServiceClient(context.Context, *ServiceClientInfo) (*Status, error)
	Ping(context.Context, *PingRequest) (*Status, error)
}

func RegisterMasterRPCServer(s *grpc.Server, srv MasterRPCServer) {
	s.RegisterService(&_MasterRPC_serviceDesc, srv)
}

func _MasterRPC_RegisterSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterRPCServer).RegisterSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zros_rpc.MasterRPC/RegisterSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterRPCServer).RegisterSubscriber(ctx, req.(*SubscriberInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterRPC_UnregisterSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterRPCServer).UnregisterSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zros_rpc.MasterRPC/UnregisterSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterRPCServer).UnregisterSubscriber(ctx, req.(*SubscriberInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterRPC_RegisterPublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublisherInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterRPCServer).RegisterPublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zros_rpc.MasterRPC/RegisterPublisher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterRPCServer).RegisterPublisher(ctx, req.(*PublisherInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterRPC_UnregisterPublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublisherInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterRPCServer).UnregisterPublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zros_rpc.MasterRPC/UnregisterPublisher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterRPCServer).UnregisterPublisher(ctx, req.(*PublisherInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterRPC_RegisterServiceServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceServerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterRPCServer).RegisterServiceServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zros_rpc.MasterRPC/RegisterServiceServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterRPCServer).RegisterServiceServer(ctx, req.(*ServiceServerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterRPC_UnregisterServiceServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceServerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterRPCServer).UnregisterServiceServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zros_rpc.MasterRPC/UnregisterServiceServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterRPCServer).UnregisterServiceServer(ctx, req.(*ServiceServerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterRPC_RegisterServiceClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterRPCServer).RegisterServiceClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zros_rpc.MasterRPC/RegisterServiceClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterRPCServer).RegisterServiceClient(ctx, req.(*ServiceClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterRPC_UnregisterServiceClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterRPCServer).UnregisterServiceClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zros_rpc.MasterRPC/UnregisterServiceClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterRPCServer).UnregisterServiceClient(ctx, req.(*ServiceClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterRPC_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterRPCServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zros_rpc.MasterRPC/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterRPCServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MasterRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zros_rpc.MasterRPC",
	HandlerType: (*MasterRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterSubscriber",
			Handler:    _MasterRPC_RegisterSubscriber_Handler,
		},
		{
			MethodName: "UnregisterSubscriber",
			Handler:    _MasterRPC_UnregisterSubscriber_Handler,
		},
		{
			MethodName: "RegisterPublisher",
			Handler:    _MasterRPC_RegisterPublisher_Handler,
		},
		{
			MethodName: "UnregisterPublisher",
			Handler:    _MasterRPC_UnregisterPublisher_Handler,
		},
		{
			MethodName: "RegisterServiceServer",
			Handler:    _MasterRPC_RegisterServiceServer_Handler,
		},
		{
			MethodName: "UnregisterServiceServer",
			Handler:    _MasterRPC_UnregisterServiceServer_Handler,
		},
		{
			MethodName: "RegisterServiceClient",
			Handler:    _MasterRPC_RegisterServiceClient_Handler,
		},
		{
			MethodName: "UnregisterServiceClient",
			Handler:    _MasterRPC_UnregisterServiceClient_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _MasterRPC_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zros.proto",
}

func init() { proto.RegisterFile("zros.proto", fileDescriptor_zros_c7b669e725165f11) }

var fileDescriptor_zros_c7b669e725165f11 = []byte{
	// 801 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x96, 0xcb, 0x6e, 0xdb, 0x38,
	0x14, 0x86, 0x23, 0xc7, 0x71, 0x26, 0x47, 0xb6, 0x23, 0x33, 0xc9, 0xc4, 0x93, 0x2c, 0x66, 0xa2,
	0x20, 0x40, 0x66, 0x30, 0x30, 0x30, 0x9e, 0xed, 0x00, 0x33, 0x8e, 0xe5, 0x4c, 0xd4, 0x24, 0xb2,
	0x21, 0xdb, 0xbd, 0xac, 0x04, 0x59, 0x62, 0x1c, 0xa1, 0x8e, 0xa8, 0x8a, 0x72, 0x80, 0x64, 0x55,
	0xa0, 0xaf, 0xd0, 0x57, 0xe8, 0xb6, 0x4f, 0xd0, 0xc7, 0xe9, 0x53, 0x74, 0x55, 0x90, 0xa2, 0x64,
	0xf9, 0xb2, 0xc8, 0xa5, 0x48, 0x37, 0x5d, 0x59, 0x3c, 0xfc, 0x79, 0xce, 0x47, 0xf2, 0x27, 0x69,
	0x80, 0xdb, 0x90, 0xd0, 0x5a, 0x10, 0x92, 0x88, 0xa0, 0x9f, 0xd8, 0xb7, 0x15, 0x06, 0x8e, 0x7a,
	0x00, 0x72, 0xc7, 0xf3, 0x87, 0x26, 0x7e, 0x33, 0xc6, 0x34, 0x42, 0x3f, 0x43, 0x81, 0x84, 0xde,
	0xd0, 0xf3, 0xab, 0xd2, 0x6f, 0xd2, 0xe1, 0x9a, 0x29, 0x5a, 0xaa, 0x0f, 0x4a, 0xe7, 0xf2, 0x86,
	0x7a, 0x8e, 0x3d, 0x32, 0x88, 0x8b, 0x75, 0xff, 0x82, 0x20, 0x04, 0x79, 0xdf, 0xbe, 0xc2, 0x42,
	0xc9, 0xbf, 0xd1, 0x3e, 0x94, 0xec, 0x21, 0xf6, 0x23, 0xcb, 0x76, 0xdd, 0x10, 0x53, 0x5a, 0xcd,
	0xf1, 0xce, 0x22, 0x0f, 0x36, 0xe2, 0x18, 0xda, 0x83, 0x62, 0x88, 0xed, 0x51, 0xaa, 0x59, 0xe6,
	0x1a, 0x99, 0xc5, 0x84, 0x44, 0x0d, 0xa0, 0xdc, 0x1d, 0x0f, 0xa8, 0x13, 0x7a, 0x03, 0x1c, 0xf2,
	0x6a, 0x27, 0x80, 0x02, 0x41, 0x60, 0xf9, 0xc4, 0xc5, 0x96, 0xe7, 0x5f, 0x10, 0x5e, 0x5b, 0xae,
	0xef, 0xd4, 0x92, 0xf9, 0xd4, 0x66, 0x29, 0x4d, 0x25, 0x98, 0xe5, 0xde, 0x84, 0x95, 0x88, 0x04,
	0x9e, 0x23, 0xd8, 0xe2, 0x86, 0x4a, 0xa0, 0xd4, 0x19, 0x0f, 0x46, 0x1e, 0xbd, 0x7c, 0xa2, 0x82,
	0x6f, 0x25, 0xa8, 0x74, 0x71, 0x78, 0xed, 0x39, 0x98, 0xfd, 0x7c, 0xf3, 0xaa, 0x7b, 0x50, 0xa4,
	0x71, 0x7a, 0x8b, 0x6f, 0x53, 0x5c, 0x5c, 0x16, 0x31, 0xc3, 0xbe, 0xc2, 0x59, 0x84, 0xe6, 0xc8,
	0xc3, 0x7e, 0xf4, 0xf4, 0x08, 0x1f, 0x25, 0xa8, 0xa4, 0xeb, 0x9e, 0x0e, 0x3c, 0x80, 0x72, 0x90,
	0x04, 0xad, 0x8c, 0xc9, 0x4a, 0x69, 0x94, 0x0d, 0x46, 0x7f, 0x40, 0x65, 0x44, 0x86, 0x13, 0xd0,
	0x4c, 0x91, 0x75, 0xd1, 0xc1, 0x52, 0x72, 0xed, 0x9f, 0xb3, 0xb3, 0xe2, 0xe2, 0xd8, 0x7a, 0x53,
	0xe4, 0x5c, 0x5d, 0x85, 0xd5, 0xc4, 0x9d, 0x79, 0x2e, 0x49, 0x9a, 0xea, 0x07, 0x09, 0xca, 0xf1,
	0x62, 0xa5, 0xb4, 0xbf, 0x82, 0xec, 0xf0, 0x48, 0x16, 0x15, 0xe2, 0xd0, 0x77, 0xe3, 0xfc, 0x24,
	0x41, 0xa1, 0x1b, 0xd9, 0xd1, 0x98, 0xa2, 0xdf, 0x21, 0xef, 0x10, 0x37, 0x06, 0x2b, 0xd7, 0xb7,
	0x26, 0x5b, 0x18, 0xf7, 0xd7, 0x9a, 0xc4, 0xc5, 0x26, 0x97, 0xb0, 0x7c, 0x2e, 0x8e, 0x6c, 0x6f,
	0x94, 0x9c, 0xdc, 0xa4, 0xa9, 0x5e, 0x41, 0x9e, 0xe9, 0x50, 0x01, 0x72, 0xed, 0x53, 0x65, 0x09,
	0xc9, 0xb0, 0xda, 0x37, 0x4e, 0x8d, 0xf6, 0x0b, 0x43, 0x91, 0xd0, 0x26, 0x28, 0xba, 0xf1, 0xbc,
	0x71, 0xa6, 0x6b, 0x56, 0xc3, 0xfc, 0xbf, 0x7f, 0xde, 0x32, 0x7a, 0x4a, 0x0e, 0x95, 0x60, 0xcd,
	0x68, 0xf7, 0xac, 0xe3, 0x76, 0xdf, 0xd0, 0x94, 0x65, 0xb4, 0x0d, 0x1b, 0xc7, 0x0d, 0xfd, 0xac,
	0xa5, 0x59, 0x1d, 0xb3, 0xd5, 0x6c, 0x1b, 0x9a, 0xde, 0xd3, 0xdb, 0x86, 0x92, 0x47, 0x08, 0xca,
	0x8d, 0x33, 0xb3, 0xd5, 0xd0, 0x5e, 0x59, 0xad, 0x97, 0x7a, 0xb7, 0xd7, 0x55, 0x56, 0xd4, 0x5b,
	0x58, 0x3d, 0xc7, 0x94, 0xda, 0x43, 0x3c, 0x39, 0x3e, 0x52, 0xe6, 0xf8, 0x30, 0x52, 0x87, 0xf8,
	0x11, 0xf6, 0x23, 0x4e, 0x5a, 0x34, 0x93, 0x26, 0xfa, 0x17, 0x98, 0x4d, 0x32, 0xd6, 0x5d, 0xe6,
	0xd6, 0xdd, 0xcd, 0x58, 0x77, 0xd6, 0x70, 0xa6, 0x1c, 0x8c, 0x07, 0x49, 0x43, 0x7d, 0x2f, 0x41,
	0x59, 0x1c, 0x8b, 0xe4, 0x5e, 0x9c, 0x75, 0xb2, 0x34, 0xe7, 0xe4, 0xf8, 0x56, 0xe3, 0x6a, 0xcb,
	0xb5, 0x23, 0x5b, 0x50, 0xc9, 0x22, 0xa6, 0xd9, 0x91, 0x8d, 0xfe, 0x81, 0x92, 0x33, 0xf2, 0xe6,
	0xc8, 0xaa, 0x13, 0xb2, 0x69, 0x67, 0x99, 0xcc, 0x57, 0x29, 0xd6, 0x3b, 0x09, 0xd6, 0x53, 0x2c,
	0x1a, 0x10, 0x9f, 0xe2, 0xbb, 0x70, 0xed, 0x43, 0x29, 0x14, 0xf2, 0x2c, 0x58, 0x31, 0x09, 0x72,
	0xb2, 0x43, 0x28, 0x50, 0x6e, 0x06, 0x81, 0xa4, 0xcc, 0x9a, 0xc4, 0x14, 0xfd, 0xf5, 0x1e, 0x40,
	0x02, 0xd1, 0x69, 0xa2, 0x63, 0x28, 0xe9, 0xfe, 0x35, 0x79, 0x8d, 0x45, 0x0c, 0x65, 0xe6, 0x32,
	0xbd, 0x84, 0x3b, 0xbf, 0x2c, 0xe8, 0x89, 0x09, 0xd4, 0xa5, 0xfa, 0xe7, 0x1c, 0x6c, 0x88, 0xa8,
	0xe6, 0x51, 0x87, 0x5c, 0xe3, 0xf0, 0x86, 0xe5, 0xff, 0x0f, 0x2a, 0x26, 0x1e, 0x7a, 0x34, 0xc2,
	0x61, 0xba, 0x69, 0x68, 0x7b, 0xc1, 0x4e, 0xb2, 0x15, 0xda, 0x99, 0xa3, 0x56, 0x97, 0xd0, 0x11,
	0x6c, 0xf4, 0xfd, 0xf0, 0x71, 0x39, 0x4e, 0x60, 0x2b, 0xa1, 0x98, 0xba, 0xb1, 0xd1, 0xee, 0xdc,
	0x9c, 0x26, 0x57, 0xf9, 0xc2, 0x4c, 0xcf, 0x60, 0x7b, 0x42, 0xf3, 0xc8, 0x5c, 0x7f, 0x41, 0x9e,
	0x3d, 0xdd, 0x28, 0x73, 0xa0, 0x33, 0x4f, 0xf9, 0xa2, 0x21, 0xf5, 0x2f, 0x79, 0x58, 0x3b, 0xb7,
	0x59, 0x6d, 0xb6, 0xb8, 0x47, 0x80, 0xd2, 0x69, 0xa5, 0x8f, 0xed, 0xd4, 0x0e, 0x4e, 0x3d, 0xc1,
	0x0b, 0x21, 0x34, 0xd8, 0xcc, 0x4c, 0xe8, 0xa1, 0x59, 0x7e, 0x6c, 0xf3, 0x7d, 0xa8, 0xe2, 0x4b,
	0x62, 0x41, 0xa6, 0xc9, 0x23, 0x7e, 0x67, 0xaa, 0x87, 0xe6, 0xba, 0xbf, 0xf9, 0x06, 0x05, 0xfe,
	0xdf, 0xf3, 0xef, 0xaf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6b, 0x4d, 0xd8, 0x29, 0x89, 0x0a, 0x00,
	0x00,
}
